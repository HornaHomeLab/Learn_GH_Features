on:
  workflow_call:
    inputs:
      version_tag:
        type: string
        required: true
      pre_release:
        type: string
        required: true
    outputs:
      release_id:
        description: "Release id of updated or newly created object"
        value: ${{ jobs.Create_Release.outputs.release_id }}



jobs:
  Create_Release:
    runs-on: container
    outputs:
      release_id: ${{ steps.release-id.outputs.release_id }}
    steps:
      - name: Check if Release ${{ inputs.version_tag }} exists
        id: release-check
        run: |
          echo "release_id=$(
            curl -L -s --fail-with-body \
              -X GET \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              --url https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ inputs.version_tag }} \
            | jq .id)" >> $GITHUB_OUTPUT

      - name: Create Release ${{ inputs.version_tag }}
        if: steps.release-check.outputs.release_id == 'null'
        id: new-release
        run: |
          echo "release_id=$(
            curl -L -s --fail-with-body \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              --url https://api.github.com/repos/${{ github.repository }}/releases \
              -d '{
                "tag_name":"${{ inputs.version_tag }}",
                "name":"${{ inputs.version_tag }} Release",
                "body":"Description of the release",
                "draft":false,
                "prerelease":${{ inputs.pre_release }},
                "generate_release_notes":false
              }' \
            | jq .id)" >> $GITHUB_OUTPUT

      - name: Update Release ${{ inputs.version_tag }}
        if: steps.release-check.outputs.release_id != 'null'
        run: |
          curl -L -s --fail-with-body \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            --url https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.release-check.outputs.release_id }} \
            -d '{
              "tag_name":"${{ inputs.version_tag }}",
              "name":"${{ inputs.version_tag }} Release",
              "body":"Description of the release",
              "draft":false,
              "prerelease":${{ inputs.pre_release }},
              "generate_release_notes":false
            }'

      - name: Get Release ID
        id: release-id
        run: |
          if [ ${{ steps.release-check.outputs.release_id }} == 'null' ]; then
            echo "release_id=${{ steps.new-release.outputs.release_id }}" >> $GITHUB_OUTPUT
          else
            echo "release_id=${{ steps.release-check.outputs.release_id }}" >> $GITHUB_OUTPUT
          fi